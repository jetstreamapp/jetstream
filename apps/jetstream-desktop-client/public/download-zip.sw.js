(()=>{"use strict";const e={isEnabled:!1,log:()=>{},error:()=>{}};e.log=console.log.bind(console,"%c DEBUG","color: blue; font-weight: bold;"),e.error=console.error.bind(console,"%c ERROR","font-weight: bold;");const t=class Crc32{constructor(){this.crc=void 0,this.table=void 0,this.append=e=>{for(let t=0;t<e.length;t++)this.crc=this.crc>>>8^this.table[255&(this.crc^e[t])]},this.get=()=>(-1^this.crc)>>>0,this.crc=-1,this.table=new Int32Array([0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117])}},i=!0;const s=new class ZipUtils{constructor(){this.createByteArray=t=>{const s=t.reduce(((e,t)=>e+(t.size?t.size:t.data.length)),0),a=new Uint8Array(s),n=new DataView(a.buffer);let r=0;return t.forEach((t=>{if(void 0!==t.data.length)a.set(t.data,r),r+=t.data.length;else{switch(t.size){case 1:n.setInt8(r,parseInt(t.data));break;case 2:n.setInt16(r,parseInt(t.data),i);break;case 4:n.setInt32(r,parseInt(t.data),i);break;case 8:n.setBigInt64(r,BigInt(t.data),i);break;default:{const i=`createByteArray: No handler defined for data size ${t.size} of entry data ${JSON.stringify(t.data)}`;throw e.error(i),i}}r+=t.size}})),a},this.calculateSize=e=>{const t=BigInt(12),i=BigInt(22),s=BigInt(32),a=BigInt(20),n=BigInt(56),r=BigInt(20);let o=e.reduce(((e,i)=>e+BigInt(30+i.name.length)+BigInt(i.size)+t+(e=>BigInt(46+e.name.length))(i)),BigInt(0));return o+=i,o>=BigInt("0xFFFFFFFF")&&(o=e.reduce(((e,i)=>e+s+(a-t)+s),o),o+=n,o+=r),o},this.getTimeStruct=e=>(e.getHours()<<6|e.getMinutes())<<5|e.getSeconds()/2,this.getDateStruct=e=>(e.getFullYear()-1980<<4|e.getMonth()+1)<<5|e.getDate()}},a=ReadableStream;const n=class Zip{constructor(i){this.zip64=void 0,this.fileRecord=void 0,this.finished=void 0,this.byteCounterBig=void 0,this.outputStream=void 0,this.outputController=void 0,this.enqueue=e=>{this.outputController?this.outputController.enqueue(e):this.outputStream.push(e)},this.close=()=>{this.outputController?this.outputController.close():this.outputStream.destroy()},this.getZip64ExtraField=(e,t)=>s.createByteArray([{data:1,size:2},{data:28,size:2},{data:e,size:8},{data:e,size:8},{data:t,size:8},{data:0,size:4}]),this.isWritingFile=()=>this.fileRecord.length>0&&!1===this.fileRecord[this.fileRecord.length-1].done,this.startFile=i=>{if(this.isWritingFile()||this.finished)e.error("Tried adding file while adding other file or while zip has finished");else{e.log(`Start file: ${i}`);const a=new Date(Date.now());this.fileRecord=[...this.fileRecord,{name:i,sizeBig:BigInt(0),crc:new t,done:!1,date:a,headerOffsetBig:this.byteCounterBig}];const n=(new TextEncoder).encode(i),r=s.createByteArray([{data:67324752,size:4},{data:45,size:2},{data:2056,size:2},{data:0,size:2},{data:s.getTimeStruct(a),size:2},{data:s.getDateStruct(a),size:2},{data:0,size:4},{data:this.zip64?4294967295:0,size:4},{data:this.zip64?4294967295:0,size:4},{data:n.length,size:2},{data:this.zip64?32:0,size:2},{data:n},{data:this.zip64?this.getZip64ExtraField(BigInt(0),this.byteCounterBig):[]}]);this.enqueue(r),this.byteCounterBig+=BigInt(r.length)}},this.appendData=t=>{try{this.isWritingFile()&&!this.finished?(this.enqueue(t),this.byteCounterBig+=BigInt(t.length),this.fileRecord[this.fileRecord.length-1].crc.append(t),this.fileRecord[this.fileRecord.length-1].sizeBig+=BigInt(t.length)):e.error("Tried to append file data, but there is no open file!")}catch(i){e.error(i)}},this.endFile=()=>{try{if(this.isWritingFile()&&!this.finished){const t=this.fileRecord[this.fileRecord.length-1];e.log(`End file: ${t.name}`);const i=s.createByteArray([{data:t.crc.get(),size:4},{data:t.sizeBig,size:this.zip64?8:4},{data:t.sizeBig,size:this.zip64?8:4}]);this.enqueue(i),this.byteCounterBig+=BigInt(i.length),this.fileRecord[this.fileRecord.length-1].done=!0}else e.error("Tried to end file, but there is no open file!")}catch(t){e.error(t)}},this.finish=()=>{if(this.isWritingFile()||this.finished)e.error("Empty zip, or there is still a file open");else{e.log("Finishing zip");let t=BigInt(0);const i=this.byteCounterBig;if(this.fileRecord.forEach((e=>{const{date:i,crc:a,sizeBig:n,name:r,headerOffsetBig:o}=e,d=(new TextEncoder).encode(r),l=s.createByteArray([{data:33639248,size:4},{data:45,size:2},{data:45,size:2},{data:2056,size:2},{data:0,size:2},{data:s.getTimeStruct(i),size:2},{data:s.getDateStruct(i),size:2},{data:a.get(),size:4},{data:this.zip64?4294967295:n,size:4},{data:this.zip64?4294967295:n,size:4},{data:d.length,size:2},{data:this.zip64?32:0,size:2},{data:0,size:2},{data:0,size:2},{data:0,size:2},{data:0,size:4},{data:this.zip64?4294967295:o,size:4},{data:d},{data:this.zip64?this.getZip64ExtraField(n,o):[]}]);this.enqueue(l),this.byteCounterBig+=BigInt(l.length),t+=BigInt(l.length)})),this.zip64){const e=this.byteCounterBig,a=s.createByteArray([{data:101075792,size:4},{data:44,size:8},{data:45,size:2},{data:45,size:2},{data:0,size:4},{data:0,size:4},{data:this.fileRecord.length,size:8},{data:this.fileRecord.length,size:8},{data:t,size:8},{data:i,size:8}]);this.enqueue(a),this.byteCounterBig+=BigInt(a.length);const n=s.createByteArray([{data:117853008,size:4},{data:0,size:4},{data:e,size:8},{data:1,size:4}]);this.enqueue(n),this.byteCounterBig+=BigInt(n.length)}const a=s.createByteArray([{data:101010256,size:4},{data:0,size:2},{data:0,size:2},{data:this.zip64?65535:this.fileRecord.length,size:2},{data:this.zip64?65535:this.fileRecord.length,size:2},{data:this.zip64?4294967295:t,size:4},{data:this.zip64?4294967295:i,size:4},{data:0,size:2}]);this.enqueue(a),this.close(),this.byteCounterBig+=BigInt(a.length),this.finished=!0,e.log(`Done writing zip file. Wrote ${this.fileRecord.length} files and a total of ${this.byteCounterBig} bytes.`)}},this.zip64=i,e.log(`[SW] Started zip with zip64: ${this.zip64}`),this.fileRecord=[],this.finished=!1,this.byteCounterBig=BigInt(0),this.outputStream=new a({start:t=>{e.log("[SW] OutputStream has started"),this.outputController=t},cancel:()=>{e.error("[SW] OutputStream has been canceled")}})}},r=new Map,o={INITIALIZE:(t,i)=>{e.log("[SW]","Initialize",{data:t});const{id:a,files:o,name:d}=t,l=s.calculateSize(o);e.log("[SW]",`Total estimated file size: ${l}`);const h=l>=BigInt("0xFFFFFFFF");r.set(a,{files:o,name:d,zip:new n(h),sizeBig:l}),i.length>0&&i[0].postMessage({command:"ACKNOWLEDGE"})},TICK:(t,i)=>{e.log("[SW]","Tock"),i.length>0&&i[0].postMessage({command:"ACTIVE_DOWNLOADS",activeIds:Array.from(r.keys())})}};self.addEventListener("install",(t=>{e.log("[SW]","Installing worker and skip waiting",{event:t}),self.skipWaiting()})),self.addEventListener("activate",(t=>{e.log("[SW]","Activating worker and skip waiting",{event:t}),self.skipWaiting(),self.clients.claim()})),self.addEventListener("fetch",(async t=>{const i=t.request.url.split("/"),s=i[i.length-1];if(s.includes("download-")){const i=s.replace("download-","");if(e.log("[SW]",`Fetch called for download id: ${i}`),!r.has(i))return void e.error("[SW][ERROR]",`No zip initialized for id: ${i}`);t.respondWith(new Response(r.get(i).zip.outputStream,{headers:new Headers({"Content-Type":"application/octet-stream; charset=utf-8","Content-Disposition":`attachment; filename="${r.get(i).name}.zip"`,"Content-Length":r.get(i).sizeBig.toString()})}));for(const t of r.get(i).files){r.get(i).zip.startFile(t.name);try{await new Promise(((e,s)=>{fetch(t.downloadUrl).then((e=>e.body)).then((async t=>{if(!t)return;const s=t.getReader();let a=!1;for(;!a;){const t=await s.read(),{done:n,value:o}=t;n?(e(),a=!0):r.get(i).zip.appendData(o)}})).catch((e=>{s(e)}))}))}catch(a){e.error("[SW][ERROR]",`Error while piping data into zip: ${a.message}`)}r.get(i).zip.endFile()}r.get(i).zip.finish(),r.delete(i),e.log("[SW]","Done with zip",i)}else e.log("[SW]","Fetch called for a non-download. Doing nothing")})),self.addEventListener("error",(t=>(e.log("[SW]",`Error: ${t.message} at line number: ${t.lineno}. Handling URL ${t.filename}`),!0))),self.addEventListener("message",(async t=>{const{data:i,ports:s}=t,a=o[i.command];a?await a(i.data,s):e.error("[SW][ERROR]",`Handler for command does not exist: ${i.command}`)}))})();
//# sourceMappingURL=download-zip.sw.js.map