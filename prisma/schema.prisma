generator client {
  provider        = "prisma-client-js"
  output          = "../libs/prisma/src/lib/generated/prisma"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("JETSTREAM_POSTGRES_DBURI")
}

model User {
  id                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  // TODO: we should deprecate this field - is there a purpose of having two user ids?
  // Might be nice to rename this to something like "legacyId" for reference
  userId            String    @unique @db.VarChar
  // TODO: we want to make this unique
  email             String    @db.VarChar
  emailVerified     Boolean   @default(false)
  password          String?   @db.VarChar
  passwordUpdatedAt DateTime?
  name              String    @db.VarChar
  nickname          String?   @db.VarChar
  picture           String?   @db.VarChar
  appMetadata       Json?     @db.Json
  lastLoggedIn      DateTime?
  createdAt         DateTime  @default(now()) @db.Timestamp(6)
  updatedAt         DateTime  @updatedAt
  hasPasswordSet    Boolean   @default(dbgenerated())

  authFactors         AuthFactors[]
  billingAccount      BillingAccount?
  entitlements        Entitlement?
  identities          AuthIdentity[]
  loginActivity       LoginActivity[]
  organizations       JetstreamOrganization[]
  passwordResetTokens PasswordResetToken[]
  preferences         UserPreference?
  rememberedDevices   RememberedDevice[]
  salesforceOrgs      SalesforceOrg[]
  subscriptions       Subscription[]
  syncData            UserSyncData[]
  teamMembership      TeamMember?
  webExtensionTokens  WebExtensionToken[]
  // AuditLog            AuditLog[]

  loginConfigurationCreatedBy   LoginConfiguration[]   @relation("LoginConfigurationCreatedBy")
  loginConfigurationUpdatedBy   LoginConfiguration[]   @relation("LoginConfigurationUpdatedBy")
  teamCreatedBy                 Team[]                 @relation("TeamCreatedBy")
  teamUpdatedBy                 Team[]                 @relation("TeamUpdatedBy")
  teamMemberCreatedBy           TeamMember[]           @relation("TeamMemberCreatedBy")
  teamMemberUpdatedBy           TeamMember[]           @relation("TeamMemberUpdatedBy")
  teamMemberInvitationCreatedBy TeamMemberInvitation[] @relation("TeamMemberInvitationCreatedBy")
  teamMemberInvitationUpdatedBy TeamMemberInvitation[] @relation("TeamMemberInvitationUpdatedBy")
}

model AuthFactors {
  userId  String  @db.Uuid
  type    String
  enabled Boolean @default(false)
  secret  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, type])
}

model Team {
  id            String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String             @db.VarChar(255)
  loginConfigId String             @unique @db.Uuid
  loginConfig   LoginConfiguration @relation(fields: [loginConfigId], references: [id], onDelete: Cascade)
  status        String             @default("ACTIVE") @db.VarChar(50) // 'ACTIVE' | 'INACTIVE'
  billingStatus String             @default("ACTIVE") @db.VarChar(50) // 'ACTIVE' | 'PAST_DUE' | 'MANUAL'
  createdAt     DateTime           @default(now())
  createdById   String?            @db.Uuid
  updatedAt     DateTime           @updatedAt
  updatedById   String?            @db.Uuid

  members        TeamMember[]
  sharedOrgs     SalesforceOrg[]        @relation("TeamSharedOrgs")
  subscriptions  TeamSubscription[]
  billingAccount TeamBillingAccount?
  invitations    TeamMemberInvitation[]
  entitlements   TeamEntitlement?

  createdByUser User? @relation("TeamCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedByUser User? @relation("TeamUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@map("team")
}

enum Feature {
  ALL
  QUERY
  UPDATE_RECORDS
  AUTOMATION_CONTROL
  PERMISSION_MANAGER
  DEPLOYMENT
  DEVELOPER_TOOLS
}

model TeamMember {
  teamId   String    @db.Uuid
  userId   String    @unique @db.Uuid
  role     String    @default("MEMBER") @db.VarChar(50) // 'ADMIN' | 'MEMBER' | 'BILLING'
  status   String    @default("ACTIVE") @db.VarChar(50) // 'ACTIVE' | 'INACTIVE'
  features Feature[] @default([ALL])

  createdAt   DateTime @default(now())
  createdById String?  @db.Uuid
  updatedAt   DateTime @updatedAt
  updatedById String?  @db.Uuid

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdByUser User? @relation("TeamMemberCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedByUser User? @relation("TeamMemberUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@id([teamId, userId])
  @@map("team_member")
}

model TeamMemberInvitation {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email      String    @db.VarChar(255)
  teamId     String    @db.Uuid
  role       String    @default("MEMBER") @db.VarChar(50) // 'ADMIN' | 'MEMBER' | 'BILLING'
  features   Feature[] @default([ALL])
  token      String    @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  expiresAt  DateTime
  lastSentAt DateTime

  createdAt   DateTime @default(now())
  createdById String?  @db.Uuid
  updatedAt   DateTime @updatedAt
  updatedById String?  @db.Uuid

  team          Team  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdByUser User? @relation("TeamMemberInvitationCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedByUser User? @relation("TeamMemberInvitationUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@unique([teamId, email], name: "uniqueTeamEmail", map: "unique_team_email")
  // For listing and expiring
  @@index([teamId, expiresAt])
  @@map("team_member_invitation")
}

model LoginConfiguration {
  id                   String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  domains              String[]       @default([]) @db.VarChar(255)
  requireMfa           Boolean        @default(false)
  allowIdentityLinking Boolean        @default(true)
  allowedMfaMethods    AuthFactor[]   @default([otp, email])
  allowedProviders     AuthProvider[] @default([credentials, google, salesforce])
  autoAddToTeam        Boolean        @default(false)
  team                 Team?

  createdAt   DateTime @default(now())
  createdById String?  @db.Uuid
  updatedAt   DateTime @updatedAt
  updatedById String?  @db.Uuid

  createdByUser User? @relation("LoginConfigurationCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedByUser User? @relation("LoginConfigurationUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@index([domains])
  @@map("login_configuration")
}

enum AuthFactor {
  otp
  email
}

enum AuthProvider {
  credentials
  google
  salesforce
}

model PasswordResetToken {
  userId    String   @db.Uuid
  email     String
  token     String   @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email, token])
}

model Entitlement {
  id              String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId          String  @unique @db.Uuid
  chromeExtension Boolean @default(false)
  googleDrive     Boolean @default(false)
  recordSync      Boolean @default(false)
  desktop         Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("entitlement")
}

model TeamEntitlement {
  id              String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  teamId          String  @unique @db.Uuid
  chromeExtension Boolean @default(false)
  googleDrive     Boolean @default(false)
  recordSync      Boolean @default(false)
  desktop         Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("team_entitlement")
}

model WebExtensionToken {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId    String   @db.Uuid
  type      String
  source    String   @default("BROWSER_EXTENSION")
  token     String
  deviceId  String   @unique
  ipAddress String
  userAgent String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([type, userId, deviceId])
  @@unique([type, token, deviceId])
  @@map("web_extension_token")
}

model RememberedDevice {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId    String   @db.Uuid
  deviceId  String   @unique
  ipAddress String
  userAgent String?
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuthIdentity {
  userId            String  @db.Uuid
  isPrimary         Boolean @default(false)
  type              String
  provider          String
  providerAccountId String
  email             String
  emailVerified     Boolean @default(false)
  username          String
  name              String
  givenName         String?
  familyName        String?
  picture           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

// TODO: I should be able to store in server sessions and not in DB
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model LoginActivity {
  id           Int      @id @default(autoincrement())
  action       String
  method       String?
  email        String?
  userId       String?  @db.Uuid
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  ipAddress    String?
  userAgent    String?
  success      Boolean
  errorMessage String?
  requestId    String?
  createdAt    DateTime @default(now())

  // For queries filtering by userId and sorting by createdAt,id
  @@index([userId, createdAt, id])
}

model EmailActivity {
  id         Int      @id @default(autoincrement())
  email      String
  subject    String
  status     String?
  providerId String?
  createdAt  DateTime @default(now())
}

model UserPreference {
  id                 String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String   @unique @db.Uuid
  skipFrontdoorLogin Boolean  @default(false)
  recordSyncEnabled  Boolean  @default(true)
  createdAt          DateTime @default(now()) @db.Timestamp(6)
  updatedAt          DateTime @updatedAt
}

model JetstreamOrganization {
  id          String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String          @db.Uuid
  orgs        SalesforceOrg[]
  name        String          @db.VarChar(60)
  description String?         @db.VarChar(255)
  createdAt   DateTime        @default(now()) @db.Timestamp(6)
  updatedAt   DateTime        @updatedAt

  @@map("jetstream_organization")
}

model SalesforceApi {
  id               String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  groupName        String?  @db.VarChar
  groupDescription String?  @db.VarChar
  name             String?  @db.VarChar
  description      String?  @db.VarChar
  method           String?  @db.VarChar
  url              String?  @db.VarChar
  header           String?  @db.VarChar
  body             String?  @db.VarChar
  createdAt        DateTime @default(now()) @db.Timestamp(6)
  updatedAt        DateTime @updatedAt

  @@map("salesforce_api")
}

model BillingAccount {
  userId        String   @unique @db.Uuid
  customerId    String   @unique
  manualBilling Boolean  @default(false)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  updatedAt     DateTime @updatedAt

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptions Subscription[]

  @@unique([userId, customerId], name: "uniqueCustomer", map: "unique_customer")
  @@map("billing_account")
}

model Subscription {
  id             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId         String   @db.Uuid
  customerId     String
  productId      String?  @db.Uuid
  subscriptionId String
  priceId        String
  status         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  billingAccount BillingAccount @relation(fields: [customerId], references: [customerId], onDelete: Cascade)

  @@unique([userId, subscriptionId, priceId], name: "uniqueSubscription", map: "unique_subscription")
  @@map("subscription")
}

model TeamBillingAccount {
  teamId            String   @unique @db.Uuid
  customerId        String   @unique
  manualBilling     Boolean  @default(false)
  licenseCountLimit Int?
  createdAt         DateTime @default(now()) @db.Timestamp(6)
  updatedAt         DateTime @updatedAt

  team          Team               @relation(fields: [teamId], references: [id], onDelete: Cascade)
  subscriptions TeamSubscription[]

  @@unique([teamId, customerId], name: "uniqueCustomer", map: "unique_team_customer")
  @@map("team_billing_account")
}

model TeamSubscription {
  id             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  teamId         String   @db.Uuid
  customerId     String
  productId      String?  @db.Uuid
  subscriptionId String
  priceId        String
  status         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  team               Team               @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamBillingAccount TeamBillingAccount @relation(fields: [customerId], references: [customerId], onDelete: Cascade)

  @@unique([teamId, subscriptionId, priceId], name: "uniqueSubscription", map: "unique_team_subscription")
  // Speeds filtering active/past-due by team
  @@index([teamId, status])
  @@map("team_subscription")
}

model SalesforceOrg {
  id                      Int                    @id @default(autoincrement())
  jetstreamUserId         String                 @db.VarChar
  jetstreamUser           User?                  @relation(fields: [jetstreamUserId2], references: [id], onDelete: Cascade)
  jetstreamUserId2        String?                @db.Uuid
  jetstreamOrganization   JetstreamOrganization? @relation(fields: [jetstreamOrganizationId], references: [id], onDelete: SetNull)
  jetstreamOrganizationId String?                @db.Uuid
  uniqueId                String                 @db.VarChar
  filterText              String                 @db.VarChar
  accessToken             String                 @db.VarChar
  instanceUrl             String                 @db.VarChar
  loginUrl                String                 @db.VarChar
  userId                  String                 @db.VarChar(18)
  email                   String                 @db.VarChar
  organizationId          String                 @db.VarChar(18)
  username                String                 @db.VarChar
  displayName             String                 @db.VarChar
  thumbnail               String?                @db.VarChar
  apiVersion              String?                @db.VarChar
  orgName                 String?                @db.VarChar
  orgCountry              String?                @db.VarChar
  orgInstanceName         String?                @db.VarChar
  orgIsSandbox            Boolean?
  orgLanguageLocaleKey    String?                @db.VarChar
  orgNamespacePrefix      String?                @db.VarChar
  orgTrialExpirationDate  DateTime?              @db.Date
  createdAt               DateTime               @default(now()) @db.Timestamp(6)
  updatedAt               DateTime               @updatedAt
  connectionError         String?                @db.VarChar
  jetstreamUrl            String?                @db.VarChar
  label                   String?                @db.VarChar(100)
  orgOrganizationType     String?                @db.VarChar
  color                   String?                @db.VarChar(10)
  Team                    Team[]                 @relation("TeamSharedOrgs")

  @@unique([jetstreamUserId2, uniqueId], name: "uniqueOrg", map: "unique_org")
  @@map("salesforce_org")
}

model sessions {
  sid    String   @id(map: "session_pkey") @db.VarChar
  sess   Json     @db.JsonB
  expire DateTime @db.Timestamp(6)

  // Generated from (sess->'user'->>'id')::uuid by the database
  userId    String   @default(dbgenerated()) @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
  @@index([userId, createdAt(sort: Desc), sid(sort: Desc)], map: "idx_sessions_user_expire_sid")
}

model AnalyticsSummary {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type      String   @unique
  week      Int
  month     Int
  year      Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model UserSyncData {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId    String    @db.Uuid
  orgId     String?
  key       String
  hashedKey String    @db.Char(40)
  entity    String
  data      Json
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, hashedKey, orgId], name: "userHashedKeyOrg", map: "user_hashed_key_org")
  @@index([userId, entity, updatedAt])
  @@index([deletedAt])
  @@map("user_sync_data")
}
